{"remainingRequest":"/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jth/IdeaProjects/GameGem/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jth/IdeaProjects/GameGem/src/components/support/Three.vue?vue&type=template&id=6e13985e&scoped=true&","dependencies":[{"path":"/Users/jth/IdeaProjects/GameGem/src/components/support/Three.vue","mtime":1624766730000},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/cache-loader/dist/cjs.js","mtime":1625748525933},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1625748531629},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/cache-loader/dist/cjs.js","mtime":1625748525933},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/index.js","mtime":1625748531629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJlbC1yb3ciLCBbCiAgICBfYygiYXJ0aWNsZSIsIHsgc3RhdGljQ2xhc3M6ICJtZC1jb250ZW50X19pbm5lciBtZC10eXBlc2V0IiB9LCBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJwbGF5ZXItc3VwcG9ydCIgfSB9LCBbX3ZtLl92KCJQbGF5ZXIgU3VwcG9ydCIpXSksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjdXN0b21lci1zdXBwb3J0IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkN1c3RvbWVyIFN1cHBvcnQiKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBHYW1lR2VtIGlzIGNvbW1pdHRlZCB0byB5b3VyIGV4cGVyaWVuY2UgYW5kIG9mZmVycyBjdXN0b21lciBzdXBwb3J0IHRvIG91ciBlbmQgdXNlcnMgZm9yIG1pc3NpbmcgcmV3YXJkcyBmb3IgdGhlIG9mZmVycyB5b3XigJl2ZSBjb21wbGV0ZWQuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udGFjdGluZy1vdXItcGxheWVyLXN1cHBvcnQtdGVhbSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgQ29udGFjdGluZyBvdXIgUGxheWVyIFN1cHBvcnQgVGVhbSAiKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJbiBvcmRlciBmb3Igb3VyIHRlYW0gdG8gcHJvY2VzcyBhIGNsYWltLCB3ZSBuZWVkIHlvdSB0byBzdWJtaXQgdGhlIFJld2FyZHMgU3VwcG9ydCBSZXF1ZXN0IGZyb20gdGhlIGFwcCBpbiB3aGljaCB5b3UgY29tcGxldGVkIHRoZSBvZmZlciBhbmQgdGhlcmVhZnRlciBwcm92aWRlIHVzIHdpdGggdGhlIHByb29mIHRoYXQgd2UgcmVxdWlyZSBpbiBvcmRlciB0byBwcm9jZXNzIHRoZSBjbGFpbS4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBsZWFzZSBub3RlLCBkdWUgdG8gR2FtZUdlbeKAmXMgc3lzdGVtIHJlcXVpcmVtZW50cywgUGxheWVyIFN1cHBvcnQgQ2xhaW1zIGNhbiBvbmx5IGJlIHByb2Nlc3NlZCB0aHJvdWdoIHRoaXMgY2hhbm5lbC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJociIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8tcmVxdWVzdC1zdXBwb3J0LWZvci1taXNzaW5nLXJld2FyZHMiIH0gfSwKICAgICAgICBbX3ZtLl92KCIgSG93IHRvIHJlcXVlc3Qgc3VwcG9ydCBmb3IgbWlzc2luZyByZXdhcmRzPyAiKV0KICAgICAgKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBPcGVuIHRoZSBHYW1lR2VtIG9mZmVyIHdhbGwgaW4gdGhlIGFwcCB3aGljaCB5b3UgY29tcGxldGVkIHRoZSBvZmZlciBpbiBhbmQgYXJlIHJlcXVlc3Rpbmcgc3VwcG9ydCBmb3IgIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiIE9uY2UgaW4gdGhlIG9mZmVyIHdhbGwsIGNsaWNrIG9uIHRoZSBtZW51IGljb246ICIpLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBhbHQ6ICIiLAogICAgICAgICAgICAgIHNyYzogImh0dHBzOi8vYWRnZW0uY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzEwL21lbnVfaWNvbi5wbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgbG9jYXRlZCBpbiB0aGUgdG9wLWxlZnQgY29ybmVyIG9mIHRoZSBvZmZlciB3YWxsICIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVGFwIG9uIOKAnFJld2FyZCBTdGF0dXPigJ0gbWVudSBpdGVtIildKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgQ2hvb3NlIHRoZSBvZmZlciB3aGljaCB5b3UgYXJlIHJlcXVlc3Rpbmcgc3VwcG9ydCBmb3Ig4oCTIHBsZWFzZSBub3RlLCBvZmZlcnMgd2hpY2ggeW91IGhhdmUgc3RhcnRlZCBtYXkgdGFrZSB1cCB0byA0IGhvdXJzIHRvIGFwcGVhciBpbiB0aGlzIGxpc3QuIE9mZmVycyB0aGF0IHdlcmUgc3RhcnRlZCBvdmVyIDMwIGRheXMgYWdvIHdpbGwgbm90IGFwcGVhciBpbiB0aGlzIGxpc3QsIHVubGVzcyBhIGNvbnZlcnNpb24gaGFzIG9jY3VycmVkLiAiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRhcCDigJxSZXF1ZXN0IFN1cHBvcnTigJ0gYW5kIGZpbGwgaW4geW91ciBlbWFpbCBhZGRyZXNzLCBhbmQgYSBkZXNjcmlwdGlvbiBvZiB0aGUgc3VwcG9ydCB5b3UgYXJlIHJlcXVlc3RpbmcuIFBsZWFzZSBub3RlIHRoYXQgb2ZmZXJzIHdoaWNoIHdlcmUgc3RhcnRlZCBsZXNzIHRoYW4gMjQgaG91cnMgYWdvIGFyZSBub3QgZWxpZ2libGUgZm9yIHJlcXVlc3Rpbmcgc3VwcG9ydCwgc2luY2Ugb2ZmZXJzIGNhbiB0YWtlIDI0LTQ4IGhvdXJzIHRvIHByb2Nlc3MuICIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUYXAgb24gdGhlIOKAnFN1Ym1pdOKAnSBidXR0b24iKV0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBBIGNvbmZpcm1hdGlvbiBlbWFpbCB3aWxsIGJlIHNlbnQgdG8gdGhlIGVtYWlsIGFkZHJlc3MgeW91IHByb3ZpZGVkIHdpdGggaW5zdHJ1Y3Rpb25zIG9uIHN1Ym1pdHRpbmcgcHJvb2YuICIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlBsZWFzZSByZXNwb25kIGRpcmVjdGx5IHRvIHRoZSBjb25maXJtYXRpb24gZW1haWwgYW5kIGRvIG5vdCBtb2RpZnkgdGhlIHN1YmplY3QgbGluZS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJZiB5b3UgbW9kaWZ5IHRoZSBzdWJqZWN0IGxpbmUgb2YgdGhpcyBlbWFpbCBvdXIgc3lzdGVtIHdpbGwgbm90IHByb3Blcmx5IHByb2Nlc3MgeW91ciByZXNwb25zZS4gSWYgeW91IGRvIG5vdCBwcm92aWRlIHVzIGV2aWRlbmNlIHdpdGhpbiAzMCBkYXlzLCB5b3VyIHJlcXVlc3QgbWF5IGJlIGNsb3NlZC4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJociIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2hhdC1ldmlkZW5jZS1kby1pLW5lZWQtdG8tc3VibWl0IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIiBXaGF0IEV2aWRlbmNlIERvIEkgTmVlZCB0byBTdWJtaXQ/ICIpCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFBsZWFzZSByZXNwb25kIHRvIHRoZSB0aWNrZXQgd2l0aCB0aGUgcmVxdWVzdGVkIHByb29mIGFjY29yZGluZyB0byB0aGUgaW5mb3JtYXRpb24gbmVlZGVkIGZvciB0aGF0IG9mZmVyIGFzIGxpc3RlZCBiZWxvdzogIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoIkRpZCB5b3UgZG93bmxvYWQgYW4gYWRkaXRpb25hbCBhcHAgdG8gY29tcGxldGUgdGhlIG9mZmVyPyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSWYgdGhlIG9mZmVyIHlvdSBzZWxlY3RlZCB3YXMgdG8gZG93bmxvYWQgYW5kIHJ1biBhbm90aGVyIGFwcCwgcGxlYXNlIGJlIHN1cmUgdG8gcnVuIHRoZSBhcHAgZm9yIGEgbWluaW11bSBvZiAyIG1pbnV0ZXMuIElmIHlvdSBzdGlsbCBoYXZlIG5vdCByZWNlaXZlZCB5b3VyIHJld2FyZCwgcGxlYXNlIHJlcGx5IHRvIHRoaXMgbWVzc2FnZSB3aXRoIGEgc2NyZWVuc2hvdCBvZiB0aGUgYXBwIHJ1bm5pbmcgb24geW91ciBkZXZpY2UuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRGlkIHlvdSBkb3dubG9hZCBhbiBhZGRpdGlvbmFsIGFwcCBhbmQgbWVldCB0aGUgZW5nYWdlbWVudCByZXF1aXJlbWVudCBpbnN0cnVjdGlvbnMgdG8gY29tcGxldGUgdGhlIG9mZmVyPyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJZiB0aGUgb2ZmZXIgeW91IHNlbGVjdGVkIHdhcyB0byBkb3dubG9hZCBhbmQgZW5nYWdlIHdpdGggYW5vdGhlciBhcHAsIHBsZWFzZSBiZSBzdXJlIHRvIHJ1biB0aGUgYXBwIGZvciBhIG1pbmltdW0gb2YgMiBtaW51dGVzIGFuZCBjb21wbGV0ZSB0aGUgZW5nYWdlbWVudCByZXF1aXJlbWVudHMgYXMgbGlzdGVkIGluIHRoZSBvZmZlciBpbnN0cnVjdGlvbnMuIElmIHlvdSBzdGlsbCBoYXZlIG5vdCByZWNlaXZlZCB5b3VyIHJld2FyZCwgcGxlYXNlIHJlcGx5IHRvIHRoaXMgbWVzc2FnZSB3aXRoIGEgc2NyZWVuc2hvdCBvZiB0aGUgYXBwIHJ1bm5pbmcgb24geW91ciBkZXZpY2UgYW5kIHNob3dpbmcgaW5kaWNhdGlvbiB0aGF0IHRoZSBlbmdhZ2VtZW50IHJlcXVpcmVtZW50IHdhcyBtZXQuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRGlkIHlvdSBwdXJjaGFzZSBhIHByb2R1Y3Qgb3Igc2VydmljZT8iKV0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIElmIHRoZSBvZmZlciB5b3Ugc2VsZWN0ZWQgd2FzIHRvIHB1cmNoYXNlIGEgcHJvZHVjdCBvciBzdWJzY3JpYmUgdG8gYSBzZXJ2aWNlLCBwbGVhc2UgcHJvdmlkZSB0aGUgY29uZmlybWF0aW9uIGVtYWlsLCBiaWxsaW5nIGludm9pY2UsIG9yIHdlbGNvbWUgZW1haWwgeW91IHJlY2VpdmVkIHdoZW4geW91IGNvbXBsZXRlZCB0aGUgb2ZmZXIuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJEaWQgdGhlIG9mZmVyIHJlcXVpcmUgeW91IHRvIG1ha2UgYSBwaG9uZSBjYWxsPyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSWYgdGhlIG9mZmVyIHlvdSBzZWxlY3RlZCByZXF1aXJlZCB5b3UgdG8gbWFrZSBhIHBob25lIGNhbGwsIHBsZWFzZSBwcm92aWRlIHlvdXIgZmlyc3QgYW5kIGxhc3QgbmFtZSwgdGhlIG1vYmlsZSBudW1iZXIgeW91IGNhbGxlZCBmcm9tLCBhbmQgdGhlIGRhdGUgeW91IGNvbXBsZXRlZCB0aGUgb2ZmZXIuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaHIiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRldmljZS1pZGVudGlmaWNhdGlvbiIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJEZXZpY2UgSWRlbnRpZmljYXRpb24iKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIldoYXQgaXMgYSBkZXZpY2UgSUQ/IildKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEEgRGV2aWNlIElEIGlzIGEgc3RyaW5nIG9mIGxldHRlcnMgYW5kIG51bWJlcnMgdGhhdCB1bmlxdWVseSBpZGVudGlmaWVzIGluZGl2aWR1YWwgbW9iaWxlIChzbWFydHBob25lIG9yIHRhYmxldCkgZGV2aWNlcy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgaU9TIGRldmljZSBpZGVudGlmaWVyIGlzIGNhbGxlZCBJREZBIChJZGVudGlmaWVyIGZvciBBZHZlcnRpc2VycykgIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBBbmRyb2lkIGRldmljZSBpZGVudGlmaWVyIGlzIGNhbGxlZCBBZElEIChBZHZlcnRpc2luZyBJZGVudGlmaWVyKSAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJIb3cgdG8gbG9jYXRlIHlvdXIgSURGQSAoaU9TIEFkdmVydGlzaW5nIElEKSIpXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVGhlIGFkdmVydGlzaW5nIElEIG9uIGlPUyBkZXZpY2VzIGlzIGhpZGRlbiBmcm9tIHVzZXJzIGJ5IEFwcGxlIGJ5IGRlZmF1bHQgYnV0IGl0IGNhbiBiZSByZXRyaWV2ZWQgd2l0aCB0aGlyZC1wYXJ0eSBhcHBzLiBIZXJlIGFyZSBhIGZldyBzZWxlY3RlZCBhcHBzIGZvciBpT1MgdGhhdCBjYW4gc2hvdyBhIGRldmljZeKAmXMgSURGQSB0byB1c2VyczogIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2FwcHMuYXBwbGUuY29tL3VzL2FwcC9teS1kZXZpY2UtaWQtYnktYXBwc2ZseWVyLXdoaXRlbGlzdC10ZXN0LWRldmljZS9pZDExOTIzMjM5NjAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJNeSBEZXZpY2UgSURGQSBieSBBcHBzRmx5ZXIiKV0KICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2FwcHMuYXBwbGUuY29tL3VzL2FwcC9hZGp1c3QtaW5zaWdodHMvaWQxMTI1NTE3ODA4IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiQWRqdXN0IEluc2lnaHRzIGJ5IEFkanVzdCIpXQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vYXBwcy5hcHBsZS5jb20vdXMvYXBwL215LXR1bmUtZGV2aWNlL2lkMTEwMDM3NzA3NCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIk15IFRVTkUgRGV2aWNlIGJ5IFR1bmUiKV0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgIF92bS5fdigiSG93IHRvIGxvY2F0ZSB5b3VyIEFkSUQgKEFuZHJvaWQgQWR2ZXJ0aXNpbmcgSUQpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUbyBsb2NhdGUgeW91ciBBbmRyb2lkIEFkdmVydGlzaW5nIElkZW50aWZpZXIiKV0pLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIE9wZW4gdGhlIEdvb2dsZSBTZXR0aW5ncyBBcHAg4oCTIGRlcGVuZGluZyBvbiB5b3VyIHBob25lLCBlaXRoZXI6ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBPcGVuIHlvdXIgcGhvbmXigJlzIFNldHRpbmdzIGFwcCAiKSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgYWx0OiAiQW5kIHRoZW4iLAogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9XRDNMS0tlajM0dnEzY1pYd2lsZ2VhaElQT2lva04ydWFybWtEeHRNcUtNRmc0U1N5czhCa09CSmJuNF80UjkzMGdFPWgzNiIsCiAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQW5kIHRoZW4iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdvb2dsZSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBPcGVuIGEgc2VwYXJhdGUgYXBwIGNhbGxlZCAiKSwKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiR29vZ2xlIFNldHRpbmdzIildKSwKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgYWx0OiAiIiwKICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vemRaZWFoVHFfaTc0eGlVVUpHMUpjMDJpaGpGX0p6WjBRSWpDb2ctRjdUN1c5ZkttdjlNYVBYTFQwSHFmQTFyUmxFa2g9dzM2LWgzNiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUYXAgb24gIiksIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBZHMiKV0pXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFlvdXIgQWR2ZXJ0aXNpbmcgSWRlbnRpZmllciB3aWxsIGJlIGxpc3RlZCBhdCB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaHIiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBPbmNlIHdlIGhhdmUgdGhpcyBpbmZvcm1hdGlvbiBhbmQgaGF2ZSB2ZXJpZmllZCB5b3VyIGVsaWdpYmlsaXR5IHdpdGggdGhlIGFkdmVydGlzZXIsIHdl4oCZbGwgbWFrZSBzdXJlIHRvIGF3YXJkIHlvdXIgZGV2aWNlIGFzIHF1aWNrbHkgYXMgcG9zc2libGUsIHBsZWFzZSBub3RlIHRoYXQgdGhlIHZlcmlmaWNhdGlvbiBwcm9jZXNzIG1heSB0YWtlIHVwIHRvIDcgZGF5cy4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}