{"remainingRequest":"/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jth/IdeaProjects/GameGem/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jth/IdeaProjects/GameGem/src/components/support/Two.vue?vue&type=template&id=42bd580c&scoped=true&","dependencies":[{"path":"/Users/jth/IdeaProjects/GameGem/src/components/support/Two.vue","mtime":1624766730000},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/cache-loader/dist/cjs.js","mtime":1625748525933},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1625748531629},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/cache-loader/dist/cjs.js","mtime":1625748525933},{"path":"/Users/jth/IdeaProjects/GameGem/node_modules/vue-loader/lib/index.js","mtime":1625748531629}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}